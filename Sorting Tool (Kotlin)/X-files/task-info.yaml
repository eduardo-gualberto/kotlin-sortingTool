type: edu
files:
- name: src/sorting/Main.kt
  visible: true
  text: "package sorting\n\nimport java.util.Scanner\n\nfun areArgsValid(arguments:\
    \ Array<String>) : Boolean {\n    val args = arguments.joinToString(\" \")\n \
    \   if (\"-sortingType\" in args) {\n        if (\"natural\" !in args && \"byCount\"\
    \ !in args) {\n            println(\"No sorting type defined!\")\n           \
    \ return false\n        }\n    }\n    if (\"dataType\" in args) {\n        if\
    \ (\"long\" !in args && \"line\" !in args && \"word\" !in args) {\n          \
    \  println(\"No data type defined!\") \n            return false\n        }\n\
    \    }\n     \n    val regex = \"-[a-zA-Z0-9]+\".toRegex()\n    for (result in\
    \ regex.findAll(args).filter { it -> it.value != \"-sortingType\" && it.value\
    \ != \"-dataType\" })\n    \tprintln(\"\\\"${result.value}\\\" is not a valid\
    \ parameter. It will be skipped.\")\n    \n    return true\n}\n\nfun readInputData(dataType:\
    \ String) : String {\n    val scanner = Scanner(System.`in`)\n//     val scanner\
    \ = Scanner(\"1 -2   333 4\\n42\\n1                 1\\n\")\n    var result =\
    \ \"\"\n    \n    while(scanner.hasNextLine()) {\n        if (dataType == \"line\"\
    ) {\n            val input = scanner.nextLine()\n            result += \"$input\"\
    \n            result += \"\\n\"\n        }\n        else {\n            val input\
    \ = scanner.nextLine().replace(\"\\\\s+\".toRegex(), \" \")\n            result\
    \ += \"$input\"\n            result += \" \"\n        }\n    }\n    return result.trimIndent()\n\
    }\n\n\nfun inputWordToList(inputData: String) : List<String> {\n    val scanner\
    \ = Scanner(inputData)\n    \n    var list = mutableListOf<String>()\n    while\
    \ (scanner.hasNext())\n        list.add(scanner.next())\n    return list.toList()\t\
    \t\n}\n\nfun inputNumberToList(inputData: String) : List<Int> {\n    val scanner\
    \ = Scanner(inputData)\n    \n    var list = mutableListOf<Int>()\n\n    while\
    \ (scanner.hasNext()) {\n        val nextToken = scanner.next()\n        try {\n\
    \            list.add(nextToken.toInt())\n        } catch (e: NumberFormatException)\
    \ {\n            println(\"\\\"$nextToken\\\" is not a long. It will be skipped.\"\
    )\n            continue\n        }\n    }\n    \n    while (scanner.hasNextInt())\n\
    \    \tlist.add(scanner.nextInt())\n    return list.toList()\n}\n\nfun inputLineToList(inputData:\
    \ String) : List<String> {\n    var list = inputData.split(\"\\n\").toList()\n\
    \    return list\n}\n\n\nfun totalCount(list: List<Any>) : Int {\n    return list.count()\n\
    }\n\nfun swap(list: MutableList<Int>, i: Int, j: Int) {\n    val t = list[i]\n\
    \    list[i] = list[j]\n    list[j] = t\n}\n\nfun merge(list1: List<Int>, list2:\
    \ List<Int>) : List<Int> {\n    var i = 0\n    var j = 0\n    val resultList =\
    \ mutableListOf<Int>()\n    while(i < list1.size && j < list2.size) {\n      \
    \  if(list1[i] < list2[j])\n            resultList.add(list1[i++])\n        else\n\
    \            resultList.add(list2[j++])   \n    }\n    while (i < list1.size)\
    \ resultList.add(list1[i++])\n    while (j < list2.size) resultList.add(list2[j++])\n\
    \n    return resultList.toList()\n}\n\nfun mergeSort(list: List<Int>) : List<Int>\
    \ {\n    // if (list !is List<Int>)\n    //     return emptyList<Int>()\n    if\
    \ (list.size == 1)\n        return listOf(list[0])\n        \n    if (list.isEmpty())\n\
    \        return emptyList<Int>()\n    \n    val pivot = list.size / 2\n    val\
    \ left = mergeSort(list.subList(0, pivot))\n    val right = mergeSort(list.subList(pivot,\
    \ list.size))\n\n    return merge(left, right)    \n}\n\nfun countingMap(list:\
    \ List<Any>) : Map<Int, Array<Any>> {\n    val arr = list.toTypedArray()\n   \
    \ arr.sort()\n    val map = mutableMapOf<Int, Array<Any>>()\n    for (item in\
    \ arr) {\n        val itemCount = arr.count{ it -> it == item }\n        if (map.contains(itemCount))\
    \    \n            map[itemCount] = map[itemCount]!!.plus(item)\n        else\n\
    \            map[itemCount] = arrayOf(item)\n    }\n    return map.toSortedMap()\n\
    }\n\nfun printerSortingNatural(inputList: List<Any>, dataType: String) {\n   \
    \ when(dataType) {\n        \"long\" -> {\n        }\n        \"word\" -> {\n\
    \            val inputArray = inputList.toTypedArray()\n            inputArray.sort()\n\
    \            println(\"Total words: ${totalCount(inputList)}.\")\n           \
    \ println(\"Sorted data: ${inputArray.joinToString(\" \")}\")\n        }\n   \
    \     else -> {\n            val inputArray = inputList.toTypedArray()\n     \
    \       inputArray.sort()\n            println(\"Total lines: ${totalCount(inputList)}.\"\
    )\n            println(\"Sorted data:\")\n            for (line in inputArray)\n\
    \                println(line)\n        }\n    }\n}\n\nfun printerSortingNaturalLong(inputList:\
    \ List<Int>, dataType: String) {\n    println(\"Total numbers: ${totalCount(inputList)}.\"\
    )\n    println(\"Sorted data: ${mergeSort(inputList).joinToString(\" \")}\")\n\
    }\n\n\nfun printerSortingByCount(inputList: List<Any>, dataType: String) {\n \
    \   val map = countingMap(inputList)\n    val totalCount = totalCount(inputList)\n\
    \ \n    when(dataType) {\n        \"long\" -> println(\"Total numbers: $totalCount.\"\
    )\n        \"word\" -> println(\"Total words: $totalCount.\")\n        else ->\
    \ println(\"Total lines: $totalCount.\")\n    }\n\n    for ((k, v) in map) {\n\
    \        val percentage = Math.round((k.toDouble() / totalCount) * 100).toInt()\n\
    \        for (item in v.toSet())\n            println(\"$item: $k time(s), $percentage%\"\
    )\n    }\n\n}\n\nfun main(args: Array<String>) {\n    // write your code here\n\
    \    // print(args[0] + \" \")\n    // println(args[1])\n\n    if (!areArgsValid(args))\n\
    \        return\n    \n    val isSortingType = \"-sortingType\" in args\n    val\
    \ sortingType = when(isSortingType) {\n        false -> \"natural\"\n        else\
    \ -> args[args.indexOf(\"-sortingType\") + 1]\n    }\n\n    val isDataType = \"\
    -dataType\" in args\n    var dataType = when(isDataType) {\n        false -> \"\
    word\"\n        else -> {\n            if (args.lastIndex > args.indexOf(\"-dataType\"\
    )) \n                args[args.indexOf(\"-dataType\") + 1]\n            else\n\
    \                \"word\"\n        }\n    }\n    \n    val inputData = readInputData(dataType)\n\
    \    \n    when (dataType) {\n        \"line\" -> {\n            val dataList\
    \ = inputLineToList(inputData)\n        \tif(sortingType == \"natural\")\n   \
    \             printerSortingNatural(dataList, dataType)\n            else\n  \
    \              printerSortingByCount(dataList, dataType)\n        }\n        \"\
    word\" -> {\n            val dataList = inputWordToList(inputData)\n         \
    \   if(sortingType == \"natural\")\n                printerSortingNatural(dataList,\
    \ dataType)\n            else\n                printerSortingByCount(dataList,\
    \ dataType)\n        }\n        else -> {\n            val dataList = inputNumberToList(inputData)\n\
    \            if(sortingType == \"natural\")\n                printerSortingNaturalLong(dataList,\
    \ dataType)\n            else\n                printerSortingByCount(dataList,\
    \ dataType)\n        }\n    }\n}"
  learner_created: false
- name: test/common/SortingToolStage6Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.io.File
    import java.io.FileNotFoundException
    import java.util.*

    class SortingToolStage6Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests() + stage6Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            @Suppress("NAME_SHADOWING") var reply = reply

            val fileNameArgIdx = clue.args.indexOf("-outputFile")

            if (fileNameArgIdx != -1) {
                val fileName = clue.args[fileNameArgIdx + 1]

                try {
                    reply = File(fileName).readText()
                } catch (ex: FileNotFoundException) {
                    return CheckResult.wrong(
                        "There is no output file $fileName"
                    )
                }

            }

            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    private fun fileTestCase(
        input: String,
        revealTest: Boolean,
        file: String,
        vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
            .setAttach(SortingToolClue(input, revealTest, args.toList()))
            .addArguments(*args)
            .addFile(file, input)
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-dataType", "long", "-sortingType", "natural"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-dataType", "long"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "long"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "word"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "line"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "line"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "word"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "long"
            )
        )
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "long", "-abc"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "line", "-cde"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-dataType", "line", "-sortingType"
            )
        )
    }

    fun stage6Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
            fileTestCase(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "input.txt",
                "-sortingType", "byCount", "-inputFile", "input.txt"
            ),
            fileTestCase(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "data.dat",
                "-sortingType", "byCount", "-inputFile", "data.dat", "-outputFile", "out.txt"
            ),
            fileTestCase(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                false,
                "input.txt",
                "-sortingType", "natural", "-inputFile", "input.txt"
            ),
            fileTestCase(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                false,
                "data.dat",
                "-sortingType", "natural", "-inputFile", "data.dat", "-outputFile", "out.txt"
            )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
        consoleInput: String,
        revealTest: Boolean,
        vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
            .setInput(consoleInput)
            .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }


    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }


    fun <TokenType : Comparable<TokenType>> checkNatural(
        actualTokens: List<TokenType>,
        sortedTokensParser: (String) -> List<TokenType>,
        clue: SortingToolClue,
        reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't parse your output: expected 2 lines.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't find number in the first line of your output.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Sorted tokens are incorrect.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }


    fun <TokenType : Comparable<TokenType>> checkByCount(
        actualTokens: List<TokenType>,
        tokenParser: (String) -> TokenType,
        clue: SortingToolClue,
        reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't find number in the first line of your output.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                        false,
                        "Token ($token) is incorrect. Expected: $actualToken.\n" +
                            revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: out.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/9628#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 02 May 2023 22:24:55 UTC"
record: -1
